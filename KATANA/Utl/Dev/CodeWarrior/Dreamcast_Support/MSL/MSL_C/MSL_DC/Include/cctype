/*  Metrowerks Standard Library  */

/*  $Date: 1999/01/22 23:40:30 $ 
 *  $Revision: 1.7 $ 
 *  $NoKeywords: $ 
 *
 *		Copyright © 1995-1999 Metrowerks, Inc.
 *		All rights reserved.
 */

/*
 *	cctype
 */


#ifndef	__cctype__
#define __cctype__

#include <ctype.h>

#undef isalnum	
#undef isalpha
#undef iscntrl
#undef isdigit
#undef isgraph
#undef islower
#undef isprint
#undef ispunct
#undef isspace
#undef isupper
#undef isxdigit
#undef tolower
#undef toupper

#if 0
#ifdef __cplusplus

	inline int isalnum(int c) { return (_ctype[(c) & 0xff] & (_UPPER | _LOWER | _DIGIT)); }
	inline int isalpha(int c) {	return (_ctype[(c) & 0xff] & (_UPPER | _LOWER)); }
	inline int iscntrl(int c) { return (_ctype[(c) & 0xff] & _CNTRL); }
	inline int isdigit(int c) {	return (_ctype[(c) & 0xff] & _DIGIT); }
	inline int isgraph(int c) { return (_ctype[(c) & 0xff] & (_UPPER | _LOWER | _DIGIT | _PUNCT)); }
	inline int islower(int c) { return (_ctype[(c) & 0xff] & _LOWER); }
	inline int isprint(int c) {	return (_ctype[(c) & 0xff] & (_UPPER|_LOWER|_DIGIT|_PUNCT|_SPACE)); }
	inline int ispunct(int c) { return (_ctype[(c) & 0xff] & _PUNCT); }
	inline int isspace(int c) {	return (_ctype[(c) & 0xff] & _WHITE); }
	inline int isupper(int c) {	return (_ctype[(c) & 0xff] & _UPPER); }
	inline int isxdigit(int c) { return (_ctype[(c) & 0xff] & _HEX); }
	inline int tolower(int c) {	return (isupper(c) ? ((c)-'A'+'a') : (c)); }
	inline int toupper(int c) {	return (islower(c) ? ((c)-'a'+'A') : (c)); }

#endif	/* __cplusplus */
#endif

#endif	/* __cctype__ */

/*  Changes
 *  990222	AD	Include the O/S specific header rather than MSL
 */