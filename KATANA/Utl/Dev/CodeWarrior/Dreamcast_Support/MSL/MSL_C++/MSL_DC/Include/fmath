/*  Metrowerks Standard Library EC++ Version 1.0a1  1998 March 25
 *
 *	fmath
 *	
 *		Copyright © 1998 Metrowerks, Inc.
 *		All rights reserved.
 */

#ifndef _FMATH_
#define _FMATH_

#include <cmath>
#include <climits>

#define LLONG_MIN  LONGLONG_MIN
#define LLONG_MAX  LONGLONG_MAX
#define ULLONG_MAX ULONGLONG_MAX

#ifdef __LITTLE_ENDIAN

#define __HI(x) *(1+(int*)&x)
#define __LO(x) *(int*)&x
#define __HIp(x) *(1+(int*)x)
#define __LOp(x) *(int*)x

#else

#define __HI(x) *(int*)&x
#define __LO(x) *(1+(int*)&x)
#define __HIp(x) *(int*)x
#define __LOp(x) *(1+(int*)x)

#endif

bool isfinite(double x);
#define INFINITY HUGE_VAL
#define HUGE_VALF HUGE_VAL
#define HUGE_VALL HUGE_VAL
#define NAN (HUGE_VAL/HUGE_VAL)
#define DECIMAL_DIG 17

inline
float
atan2f(float y, float x)
{
	return (float)atan2(y, x);
}

inline
float
cosf(float x)
{
	return (float)cos(x);
}

inline
float
sinf(float x)
{
	return (float)sin(x);
}

inline
float
expf(float x)
{
	return (float)exp(x);
}

inline
float
logf(float x)
{
	return (float)log(x);
}

inline
float
powf(float x, float y)
{
	return (float)pow(x, y);
}

inline
long double
powl(long double x, long double y)
{
	return pow((double)x, (double)y);
}

inline
float
coshf(float x)
{
	return (float)cosh(x);
}

inline
float
sinhf(float x)
{
	return (float)sinh(x);
}

// added hypotd AD 1/13/98
inline
double
hypotd(double x, double y)
{
	return (sqrt (x*x + y*y));
}

inline
float
hypotf(float x, float y)
{
	return (float)hypotd(x, y);
}

inline
long double
hypotl(long double x, long double y)
{
	return (float)hypotd(x, y);
}

inline
long double
log10l(long double x)
{
	return log10((double)x);
}

inline
long double
modfl(long double x, long double* iptr)
{
	double iptrd;
	long double result = modf((double)x, &iptrd);
	*iptr = iptrd;
	return result;
}

inline
long double
frexpl(double x, int* y)
{
	return frexp((double)x, y);
}

// AD 1/19/99 Hitachi Lib does not overload
// abs for float and double so I did it here.
#ifdef __cplusplus

inline
float
abs (float x)
{
	return (float) fabs (x);
}

inline
double
abs (double x)
{
	return fabs (x);
}

#endif
#endif // _FMATH_
