; Tab width = 4

;---------------------------------------------------------------------------
; **  SLEEP機能 サンプルプログラム  **
; SLEEP(Haltモード)への移行/復帰用のサンプル。
; 機能が確認しやすいよう、LCDにパターンを表示してある
;----------------------------------------------------------------------------
; 1.00 990914 SEGA Enterprises,LTD.
;----------------------------------------------------------------------------

chip    LC868700
world   external

public  main                ; ghead.asm から参照されるシンボル

extern  _game_end           ; ghead.asm への参照シンボル
extern  _slp_cnt            ; オートスリープ用のカウンタ
                            ;  (ghead.asm中でカウントダウン処理)

; **** システム定数の定義 ***************************************************

                            ; OCR(発振制御レジスタ)設定値
xt_clk      equ 0a2h        ;   システムクロックに水晶発振を指定
rc_clk      equ 080h        ;   システムクロックに内蔵RC発振を指定


; **** マクロ定義 ***********************************************************

ltdr    macro   str_adr         ;TRR設定マクロ(画面表示に使用します)
    mov #(low  str_adr),trl
    mov #(high str_adr),trh
    endm 


; *** データセグメント ******************************************************

        dseg                ; データセグメント開始

r0:     ds      1           ; 間接アドレッシングレジスタ r0
r1:     ds      1           ; 間接アドレッシングレジスタ r1
r2:     ds      1           ; 間接アドレッシングレジスタ r2
r3:     ds      1           ; 間接アドレッシングレジスタ r3
        ds      12          ; その他のシステム予約レジスタ


; *** コードセグメント ******************************************************

    cseg                ; コードセグメント開始

org     200h

;--------------------------------------------------------------
; main
;--------------------------------------------------------------

main:
        mov     #0ffh, P3           ; P3の初期化(プルアップ設定)

                                    ; LCDにSEGAロゴ表示
        ltdr    _sega_logo          ; SEGAロゴのビットデータをTRRに展開
        call    xram_fill_fl        ; LCDに描画


                    ;ここから、MODE及びSLEEPの状態をチェックします。
                    ;SLEEPキー及びMODEキーは、割り込み処理内では処理しません。
                    ;常に通常動作レベルでキーをポーリングします。
                    ;この間、割り込みはベースタイマのみ有効になっています。


    connect_check:                  ; DCのコントローラに接続された？
        bp      p7, 0, game_mode_end


    mode_01:
        ld      P3                  ; P3の状態を読み込む
        bn      acc,6,game_mode_end ; MODEキーが押されたら終了


    sleep_01:
        ld      P3                  ;P3の状態取得
        bn      acc,7,sleep_02      ;SLEEPボタンが押された(P37が0の時)らスリープ処理開始
        jmp     auto_sleep_01       ;SLEEPキーが押されてなければ、auto_sleep_01へ


    sleep_02:                       ;sleepキーが放されたかどうかのチェック
        ld      P3                  ;もう一度P3の状態取得
        bn      acc,7,sleep_02      ;SLEEPボタンが押されている間はループ
                                    ; (P3はボタンが押されている間は割り込みが発生し続けるため
                                    ;  ボタンが確実に放されたタイミングを見る必要あり)

        jmp sleep                   ;SLEEPキーが放されていれば、SLEEP処理へ


    auto_sleep_01:                  ;Auto Sleep?
        ld  _slp_cnt
        be  #000h,  sleep           ;_slp_cntは、ベースタイマ割り込み処理時に
                                    ;カウントしています。(ghead.asmを参照のこと)
                                    ;前回のSLEEP終了時から一定数カウントされた場合、
                                    ;SLEEP処理に移行します。

    _loop:
        jmp connect_check           ;loop

;--------------------------------------------------------------
; sub
;--------------------------------------------------------------

                                    ;game_modeを終了します。
game_mode_end:
        jmp     _game_end


                                    ;sleep処理を実行します。
sleep:

        push    ocr                 ;液晶画面をOFFにし、RCクロックを停止します。
        mov     #xt_clk,ocr         ;OCRを32K(Xtalクロック)に設定
        mov     #00h,vccr           ;液晶表示OFF
        mov     #01h,mcr            ;液晶ドライバ停止

                    ;HALTモードに移行します。
                    ;このとき、P3割り込みを有効にし、キーを押した時に
                    ;haltモードを抜けられるようにします。
halt:   
        mov     #005h,  p3int       ;P3割り込みを許可
        set1    pcon,   0           ;haltモードに移行
        mov     #000h,  p3int       ;P3割り込みを禁止

                    ;HALTモードを抜けた要因を特定します。
                    ;SLEEPキー以外の要因の場合は、再度HALTモードに
                    ;移行します。

connect:                            ;SLEEP中にコントローラに接続された場合
        bp  p7, 0, halt_out


halt_end_01:                        ;SLEEP中にSLEEPキーが押された場合
        ld      P3                  ;P3の状態を取得
        bn      acc,7,halt_end_02   ;SLEEPキーが押されたらHaltから復帰

        jmp     halt                ;SLEEPキーがOFFなら、再度HALTモードへ


halt_end_02:                        ;SLEEPキーがOFFになる（放される）まで待機します。
        ld      P3                  ;P3の状態を読み込む
        bn      acc,7,halt_end_02   ;SLEEPキーが押されたらHaltから復帰



halt_out:
        mov     #0F0h,  _slp_cnt    ;オートスリープカウンタを初期化

        mov     #09h,mcr            ;液晶ドライバ停止
        mov     #80h,vccr           ;液晶表示ON
        pop     ocr                 ;クロックを元に戻す         

        ret


;--------------------------------------------------------------
; XRAM fill screen all ( 1画面分のデータをltdrで指定 ）
;--------------------------------------------------------------
xram_fill_fl:
        push    trh
        push    trl
        push    psw
        push    B
        push    XBNK

        set1    psw,    1

    _xram0_write:               ;XRAM Bank0への書き込み
        mov #000h,  XBNK
        call    xram_write_fl

    _trr_plus_80h:              ;
        ld  trl                 ;trl -> acc
        add #080h               ;acc + #080h -> acc
        st  trl                 ;acc -> trl

        mov #000h,  acc         ;
        addc    trh             ;acc - #080h -> acc
        st  trh                 ;

    _xram1_write:               ;XRAM Bank1への書き込み
        mov #001h,  XBNK
        call    xram_write_fl

        pop XBNK
        pop B
        pop psw
        pop trl
        pop trh

        ret

xram_write_fl:                  ; XRAMへの書き込み処理

        push    r2
        push    B

    _write_ini_fl:

        mov #080h,  r2          ;xram address set
        mov #000h,  B           ;#000h -> B

    _xram_write_fl:
        ld  B                   ;B -> acc
        ldc                     ;ROMデータロード
        st  @r2                 ;xram -> acc
        inc B                   ;B++
        inc r2                  ;r2++
        ld  r2                  ;r2 -> acc
        bne #000h,  _xram_write_fl

    _xram_write_fl_end:

        pop B   
        pop r2

        ret


;--------------------------------------------------------------
; セガロゴ ドットデータ ( VM-SDK\sample\bmp 内のデータを使用 )
;--------------------------------------------------------------

    _sega_logo:

        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b,00h, 00h, 00h, 00h
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b,00h, 00h, 00h, 00h
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b,00h, 00h, 00h, 00h
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 11101010b
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 01010101b,00h, 00h, 00h, 00h
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 01010101b
        db  00111111b, 11100111b, 11111100b, 11111111b, 11000111b, 11110000b,00h, 00h, 00h, 00h
        db  01111111b, 11101111b, 11111101b, 11111111b, 11001111b, 11111000b
        db  11110000b, 00011110b, 00000011b, 11000000b, 00001100b, 00011000b,00h, 00h, 00h, 00h
        db  11101111b, 11111101b, 11111111b, 10111111b, 11001101b, 11011000b
        db  11011111b, 11111011b, 11111111b, 01111111b, 11001101b, 11011000b,00h, 00h, 00h, 00h
        db  11011000b, 00011011b, 00000011b, 01100000b, 00011101b, 11011100b
        db  11011111b, 10011011b, 11110011b, 01101111b, 11011011b, 11101100b,00h, 00h, 00h, 00h
        db  11101111b, 11011011b, 11110011b, 01101111b, 11011011b, 01101100b
        db  11110001b, 11111000b, 00000011b, 01100000b, 11011011b, 01101100b,00h, 00h, 00h, 00h
        db  01111110b, 11111011b, 11110011b, 01101110b, 11111011b, 01101110b
        db  00111111b, 01111011b, 11110011b, 01101110b, 11110111b, 01110110b,00h, 00h, 00h, 00h
        db  00000011b, 01111011b, 00000011b, 01100010b, 11110110b, 00110110b
        db  11111111b, 01111011b, 11111111b, 01111110b, 11110110b, 11110110b,00h, 00h, 00h, 00h
        db  11111110b, 11111101b, 11111111b, 10111110b, 11110110b, 11110111b
        db  00000001b, 11111110b, 00000011b, 11000000b, 11101110b, 00000011b,00h, 00h, 00h, 00h
        db  11111111b, 11001111b, 11111101b, 11111111b, 11101100b, 11111111b
        db  11111111b, 10000111b, 11111100b, 11111111b, 11101100b, 11111111b,00h, 00h, 00h, 00h
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b,00h, 00h, 00h, 00h
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b,00h, 00h, 00h, 00h
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b,00h, 00h, 00h, 00h


    _sega_spo_logo:

        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b,00h, 00h, 00h, 00h
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b,00h, 00h, 00h, 00h
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b,00h, 00h, 00h, 00h
        db  01111111b, 11101111b, 11111110b, 11111111b, 11000111b, 11111100b
        db  11111111b, 11111111b, 11111111b, 11111111b, 11100111b, 11111100b,00h, 00h, 00h, 00h
        db  11111111b, 11111111b, 11111111b, 11111111b, 11100111b, 11111100b
        db  11111000b, 11110111b, 10001111b, 11110011b, 11100111b, 10111100b,00h, 00h, 00h, 00h
        db  11111000b, 00000111b, 10000001b, 11110011b, 11100110b, 00001100b
        db  11111111b, 11100111b, 11111001b, 11110000b, 00001111b, 10111110b,00h, 00h, 00h, 00h
        db  01111111b, 11110111b, 11111001b, 11110111b, 11101111b, 10111110b
        db  00000000b, 11110111b, 10000001b, 11110111b, 11101111b, 10111110b,00h, 00h, 00h, 00h
        db  11111000b, 11110111b, 10001111b, 11110011b, 11101111b, 11111110b
        db  11111111b, 11111111b, 11111111b, 11111111b, 11111111b, 11111111b,00h, 00h, 00h, 00h
        db  11111111b, 11111111b, 11111111b, 11111111b, 11111111b, 00011111b
        db  01111111b, 11101111b, 11111110b, 11111111b, 11011111b, 00011111b,00h, 00h, 00h, 00h
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b
        db  11111111b, 11111111b, 11111111b, 11111111b, 11111111b, 11111111b,00h, 00h, 00h, 00h
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b
        db  00000011b, 11101111b, 10111110b, 11111011b, 11110111b, 11000000b,00h, 00h, 00h, 00h
        db  00000011b, 00001101b, 10110110b, 11011000b, 11000110b, 00000000b
        db  00000011b, 11101111b, 10110110b, 11110000b, 11000111b, 11000000b,00h, 00h, 00h, 00h
        db  00000000b, 01101100b, 00110110b, 11011000b, 11000000b, 11000000b
        db  00000011b, 11101100b, 00111110b, 11011000b, 11000111b, 11000000b,00h, 00h, 00h, 00h
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b,00h, 00h, 00h, 00h
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b,00h, 00h, 00h, 00h
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b
        db  00000000b, 00000000b, 00000000b, 00000000b, 00000000b, 00000000b,00h, 00h, 00h, 00h


