/******************************************************************************
 *
 * cmcontex.h - コンテキストマネージャの宣言
 *
 * -- 著作権表示 --
 *
 *  Copyright(C) 1997 by ACCESS Co.,Ltd.
 *  All right reseved.
 *
 * -- 変更記録 --
 *
 *  $Log: /NetFront/TCP/dm_sdk/dmcast/cmcontex.h $
 * 
 * 1     98/10/26 14:53 Ueda
 * make branch dream-cast SDK
 * 
 * 1     98/08/19 18:33 Kawaguti
 *
 *****************************************************************************/
#ifdef __cplusplus /* Support for C++ */
extern "C" {
#endif /* __cplusplus */

#if !defined(CMCONTEX_H)
#define CMCONTEX_H

/*
 * 各種ヘッダの引用セクション
 */

/******************************************************************************
 * 忍ライブラリのインクルードファイルを取り込む
 *****************************************************************************/

#include <shinobi.h>

/*
 * 共有される型の定義セクション
 */

/******************************************************************************
 * コンテキストマネージャが管理するコンテキストの制御ブロック
 *****************************************************************************/

typedef struct
{
    Uint32 id;     /* +00(0)    ID領域(デバッグに用いられるマーク) */
    Uint32 r0;     /* +04(4) */
    Uint32 r1;     /* +08(8) */
    Uint32 r2;     /* +0c(12) */
    Uint32 r3;     /* +10(16) */
    Uint32 r4;     /* +14(20) */
    Uint32 r5;     /* +18(24) */
    Uint32 r6;     /* +1c(28) */
    Uint32 r7;     /* +20(32) */
    Uint32 r8;     /* +24(36) */
    Uint32 r9;     /* +28(40) */
    Uint32 r10;    /* +2c(44) */
    Uint32 r11;    /* +30(48) */
    Uint32 r12;    /* +34(52) */
    Uint32 r13;    /* +38(56) */
    Uint32 r14;    /* +3c(60) */
    Uint32 r15;    /* +40(64) */
    Uint32 pr;     /* +44(68) */
    Uint32 sr;     /* +48(72) */
    Uint32 dummy;  /* +4c(80)    メモリダンプを16バイト境界に合わせる為ダミー */
}
CM_CONTEXT;

/*
 * 外部公開する関数の宣言セクション
 */

/******************************************************************************
 * cmInitContext - コンテキストの初期化関数
 *****************************************************************************/

extern void
cmInitContext(CM_CONTEXT* context,     /* 初期化するコンテキスト */
              void (*start)(void),     /* コンテキストの実行開始番地 */
              Uint32* stack);          /* コンテキストのスタック(ボトム) */

/******************************************************************************
 * cmSwitchContext - コンテキストの切り替え関数
 *****************************************************************************/

extern void
cmSwitchContext(CM_CONTEXT* new,   /* 制御を移すコンテキスト */
                CM_CONTEXT* old);  /* 現在のコンテキストを保存する先 */

#endif /* !defined(CM_CONTEX_H) */

#ifdef __cplusplus
} /* End of extern "C" { */
#endif /* __cplusplus */
/*****************************************************************************/
/* Muleの設定(必ず各行が1行コメントでなければ認識されないので注意) */
/* Local Variables: */
/* mode: c */
/* tab-width: 4 */
/*****************************************************************************/
